type: Tests\Stubs\Enums\BackedEnum
qualifiedName: Tests\Stubs\Enums\BackedEnum
shortName: BackedEnum
location: Tests\Stubs\Enums\BackedEnum
asString: BackedEnum
isBuiltIn: false
attributes:
    asString: '#[]'
    all: {  }
implements:
    - Tests\Stubs\Interfaces\SingleGenericInterface<string>
    - BackedEnum
uses:
    traits: {  }
    excludedTraitMethods: {  }
cases:
    -
        asString: FIRST
        name: FIRST
        backingValue: first
        value: FIRST
        declaringEnum: BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
    -
        asString: SECOND
        name: SECOND
        backingValue: second
        value: SECOND
        declaringEnum: BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
declaredConstants:
    -
        asString: ALIASED
        name: ALIASED
        isFinal: false
        declaringType: Tests\Stubs\Enums\BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
        type: null
        value: 'E:35:"Tests\Stubs\Enums\BackedEnum:SECOND";'
constants:
    -
        asString: ALIASED
        name: ALIASED
        isFinal: false
        declaringType: Tests\Stubs\Enums\BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
        type: null
        value: 'E:35:"Tests\Stubs\Enums\BackedEnum:SECOND";'
declaredMethods: {  }
methods:
    -
        asString: from()
        name: from
        isAbstract: true
        isFinal: false
        returnsByReference: false
        location: 'BackedEnum::from()'
        declaringType: BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
        typeParameters: {  }
        parameters:
            -
                asString: 'arg $value'
                name: value
                passedByReference: false
                location: 'BackedEnum::from() arg $value'
                declaringMethod: from()
                type: string|int
                hasDefaultValue: false
                defaultValue: null
        returnType: static<Tests\Stubs\Enums\BackedEnum>
    -
        asString: tryFrom()
        name: tryFrom
        isAbstract: true
        isFinal: false
        returnsByReference: false
        location: 'BackedEnum::tryFrom()'
        declaringType: BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
        typeParameters: {  }
        parameters:
            -
                asString: 'arg $value'
                name: value
                passedByReference: false
                location: 'BackedEnum::tryFrom() arg $value'
                declaringMethod: tryFrom()
                type: string|int
                hasDefaultValue: false
                defaultValue: null
        returnType: '?static<Tests\Stubs\Enums\BackedEnum>'
    -
        asString: cases()
        name: cases
        isAbstract: true
        isFinal: false
        returnsByReference: false
        location: 'BackedEnum::cases()'
        declaringType: BackedEnum
        attributes:
            asString: '#[]'
            all: {  }
        typeParameters: {  }
        parameters: {  }
        returnType: array
